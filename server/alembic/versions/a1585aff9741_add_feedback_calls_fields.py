"""Add feedback calls fields

Revision ID: a1585aff9741
Revises: 34474f15eaea
Create Date: 2025-07-05 15:12:44.640518

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'a1585aff9741'
down_revision: Union[str, None] = '34474f15eaea'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('dms_integration')
    op.drop_table('knowledge_file')
    op.add_column('call', sa.Column('nps_score', sa.Integer(), nullable=True))
    op.add_column('call', sa.Column('call_reason', sa.String(length=100), nullable=True))
    op.add_column('call', sa.Column('feedback_summary', sa.Text(), nullable=True))
    op.add_column('d_m_s_integration', sa.Column('timeout_seconds', sa.Integer(), nullable=True))
    op.add_column('service_record', sa.Column('service_advisor_id', sa.Integer(), nullable=True))
    op.add_column('service_record', sa.Column('service_advisor_name', sa.String(length=100), nullable=True))
    op.add_column('service_record', sa.Column('overall_feedback', sa.Text(), nullable=True))
    op.add_column('service_record', sa.Column('positive_mentions', postgresql.ARRAY(sa.String()), nullable=True))
    op.add_column('service_record', sa.Column('areas_to_improve', postgresql.ARRAY(sa.String()), nullable=True))
    op.create_foreign_key(None, 'service_record', 'user', ['service_advisor_id'], ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'service_record', type_='foreignkey')
    op.drop_column('service_record', 'areas_to_improve')
    op.drop_column('service_record', 'positive_mentions')
    op.drop_column('service_record', 'overall_feedback')
    op.drop_column('service_record', 'service_advisor_name')
    op.drop_column('service_record', 'service_advisor_id')
    op.drop_column('d_m_s_integration', 'timeout_seconds')
    op.drop_column('call', 'feedback_summary')
    op.drop_column('call', 'call_reason')
    op.drop_column('call', 'nps_score')
    op.create_table('knowledge_file',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('organization_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('file_path', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('file_size', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('file_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('uploaded_by', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['organization_id'], ['organization.id'], name=op.f('knowledge_file_organization_id_fkey')),
    sa.ForeignKeyConstraint(['uploaded_by'], ['user.id'], name=op.f('knowledge_file_uploaded_by_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('knowledge_file_pkey'))
    )
    op.create_table('dms_integration',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('organization_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('config', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('timeout_seconds', sa.INTEGER(), server_default=sa.text('20'), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['organization_id'], ['organization.id'], name=op.f('dms_integration_organization_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('dms_integration_pkey'))
    )
    # ### end Alembic commands ### 