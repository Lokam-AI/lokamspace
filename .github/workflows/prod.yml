name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - dev

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ github.ref == 'refs/heads/main' && secrets.AWS_ACCESS_KEY_ID || secrets.AWS_ACCESS_KEY_ID_DEV }}
        aws-secret-access-key: ${{ github.ref == 'refs/heads/main' && secrets.AWS_SECRET_ACCESS_KEY || secrets.AWS_SECRET_ACCESS_KEY_DEV }}
        aws-region: ${{ github.ref == 'refs/heads/main' && secrets.AWS_REGION || secrets.AWS_REGION_DEV }}

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        cd server
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set environment variables
      run: |
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          echo "AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}" >> $GITHUB_ENV
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> $GITHUB_ENV
          echo "ENVIRONMENT=prod" >> $GITHUB_ENV
          echo "REPO_NAME=lokamspace/backend" >> $GITHUB_ENV
          echo "DATABASE_URL=${{ secrets.PROD_DATABASE_URL }}" >> $GITHUB_ENV
        else
          echo "AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID_DEV }}" >> $GITHUB_ENV
          echo "AWS_REGION=${{ secrets.AWS_REGION_DEV }}" >> $GITHUB_ENV
          echo "ENVIRONMENT=dev" >> $GITHUB_ENV
          echo "REPO_NAME=autopulse/dev" >> $GITHUB_ENV
          echo "DATABASE_URL=${{ secrets.DEV_DATABASE_URL }}" >> $GITHUB_ENV
        fi

    - name: Run database migrations
      run: |
        cd server
        export DATABASE_URL=$DATABASE_URL
        alembic upgrade head
      env:
        DATABASE_URL: ${{ github.ref == 'refs/heads/main' && secrets.PROD_DATABASE_URL || secrets.DEV_DATABASE_URL }}

    - name: Log in to Amazon ECR
      run: |
        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

    - name: Build Docker image
      run: |
        cd server
        docker build -t $REPO_NAME .

    - name: Tag Docker image
      run: |
        docker tag $REPO_NAME:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$REPO_NAME:latest

    - name: Push Docker image to ECR
      run: |
        docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$REPO_NAME:latest

    - name: Notify Slack
      run: |
        COMMIT_MSG=$(git log -1 --pretty=%B)
        AUTHOR_NAME=$(git log -1 --pretty=%an)
        
        # Get changed files in the last commit
        CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r ${{ github.sha }})
        
        # Check if changes are in server or client folders
        SERVER_CHANGES=$(echo "$CHANGED_FILES" | grep -q "^server/" && echo "true" || echo "false")
        CLIENT_CHANGES=$(echo "$CHANGED_FILES" | grep -q "^client/" && echo "true" || echo "false")
        
        # Determine service type
        if [ "$SERVER_CHANGES" = "true" ] && [ "$CLIENT_CHANGES" = "true" ]; then
          SERVICE_TYPE="Full Stack"
        elif [ "$SERVER_CHANGES" = "true" ]; then
          SERVICE_TYPE="Backend"
        elif [ "$CLIENT_CHANGES" = "true" ]; then
          SERVICE_TYPE="Frontend"
        else
          SERVICE_TYPE="Other"
        fi
          
        if [ "$ENVIRONMENT" = "prod" ]; then
          SLACK_URL=${{ secrets.SLACK_WEBHOOK_URL }}
          STATUS_MSG="âœ… *Production deployment completed successfully!*"
        else
          SLACK_URL=${{ secrets.SLACK_WEBHOOK_URL }}
          STATUS_MSG="ðŸš€ *Development deployment completed successfully!*"
        fi

        curl -X POST -H 'Content-type: application/json' \
          --data "{
            \"text\": \"$STATUS_MSG\n*Repository:* $REPO_NAME\n*Environment:* $ENVIRONMENT\n*Branch:* ${{ github.ref_name }}\n*Commit Message:* $COMMIT_MSG\n*Author:* $AUTHOR_NAME\n*Service:* $SERVICE_TYPE\"
          }" \
          $SLACK_URL
